{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Component","DEFAULT_QUERY","largeColumn","width","midColumn","smallColumn","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","results","searchKey","searchTerm","error","isLoading","needsToSearchTopStories","bind","assertThisInitialized","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","onDismiss","result","hits","page","setState","prevState","oldHits","updatedHits","concat","toConsumableArray","objectSpread","defineProperty","updateSearchTopStoriesState","_this2","arguments","length","undefined","axios","then","data","catch","event","target","value","preventDefault","id","_this$state","_results$searchKey","filter","item","objectID","_this3","_this$state2","react_default","a","createElement","className","App_Search","onChange","onSubmit","App_Table","ButtonWithLoading","onClick","Search","_ref","children","type","Table","_this4","sortKey","isSortReverse","onSort","_this$props","_this$state3","sortedList","reverseSortedList","style","App_Sort","activeSortKey","App_SortIcon","map","key","href","url","title","author","num_comments","points","App_Button","Sort","_ref2","sortClass","classNames","button-active","Button","_ref3","_ref3$className","SortIcon","_ref4","sortName","fas fa-sort-up","fas fa-sort-down","Loading","_ref5","rest","objectWithoutProperties","App_Loading","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24b889f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport './App.css';\n\nconst DEFAULT_QUERY = 'react';\nconst DEFAULT_HPP = '8';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst largeColumn = {\n  width: '40%',\n};\nconst midColumn = {\n  width: '30%',\n};\nconst smallColumn = {\n  width: '10%',\n};\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results } = prevState;\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits \n    : [];\n\n  const updatedHits = [\n    ...oldHits,\n    ...hits\n  ];\n  \n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updatedHits, page}\n    },\n    isLoading: false,\n  };\n};\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n  \n  needsToSearchTopStories (searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n    \n  setSearchTopStories (result) {\n    const { hits, page } = result;\n    this.setState(updateSearchTopStoriesState(hits, page));\n  }\n\n  \n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this.setSearchTopStories(result.data))\n      .catch(error => this.setState({ error }));\n  }\n  \n  componentDidMount () {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value })\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n    \n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    \n    this.setState({ \n      results: { \n        ...results,\n        [searchKey]: { hits: updatedHits, page }\n      }\n    });\n  }\n\n\n  render() {\n    const { \n      searchTerm, \n      results,\n      searchKey,\n      error,\n      isLoading,\n    } = this.state;\n    const page = (\n      results && \n      results[searchKey] &&\n      results[searchKey].page\n    ) || 0;\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits\n    ) || [];\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        { error\n          ? <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n          : <Table\n            list={list}\n            onDismiss={this.onDismiss}\n          />\n        }\n          <div className=\"interactions\">\n              <ButtonWithLoading\n                isLoading={isLoading}\n                onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n              >\n                More\n              </ButtonWithLoading> \n          </div>\n      </div>\n    );\n  }\n}\n\n\nconst Search = ({\n  value,\n  onChange,\n  onSubmit,\n  children,\n}) => \n  <form onSubmit={onSubmit}>\n    <input\n      type='text'\n      value={value}\n      onChange={onChange}\n    />\n    <button type=\"submit\">\n      { children }\n    </button>\n  </form>\n\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey &&\n      !this.state.isSortReverse;\n\n    this.setState({ sortKey, isSortReverse});\n  }\n\n  render() { \n    const {\n      list, \n      onDismiss,    \n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state;\n\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse\n      ? sortedList.reverse()\n      : sortedList;\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={largeColumn}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Title \n            </Sort>\n            <SortIcon\n              sortKey={'TITLE'}\n              activeSortKey={sortKey}\n              isSortReverse={isSortReverse}\n            />\n          </span>\n          <span style={midColumn}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n            </Sort>\n            <SortIcon \n              sortKey={'AUTHOR'}\n              activeSortKey={sortKey}\n              isSortReverse={isSortReverse}\n            />\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Comments\n            </Sort>\n            <SortIcon \n              sortKey={'COMMENTS'}\n              activeSortKey={sortKey}\n              isSortReverse={isSortReverse}\n            />\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n            </Sort>\n            <SortIcon \n              sortKey={'POINTS'}\n              activeSortKey={sortKey}\n              isSortReverse={isSortReverse}\n            />\n          </span>\n          <span style={smallColumn}>\n            Hide\n          </span>\n        </div>\n        {reverseSortedList.map(item =>\n          <div key={item.objectID} className=\"table-row\">\n            <span style={largeColumn}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={midColumn}>{item.author}</span>\n            <span style={smallColumn}>{item.num_comments}</span>\n            <span style={smallColumn}>{item.points}</span>\n            <span style={smallColumn}>\n              <Button\n                onClick={() => onDismiss(item.objectID)}\n                type='button'\n                className=\"button-inline\"\n              >\n                Dismiss\n                </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nconst Sort = ({ \n  sortKey, \n  activeSortKey,\n  onSort, \n  children \n}) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  );\n  \n  return (\n    <Button \n      onClick={() => onSort(sortKey)}\n      className={sortClass}  \n    >\n      { children }\n    </Button>\n  );\n}\n\n\nconst Button = ({\n  onClick, \n  className = '', \n  children,\n}) => \n    <button\n      onClick={onClick}\n      className={className}\n      type='button'\n    >\n      {children}\n    </button>\n\n\nconst SortIcon = ({\n  sortKey, \n  isSortReverse, \n  activeSortKey\n}) => {\n  const sortName = classNames({\n    'fas fa-sort-up': !isSortReverse && sortKey === activeSortKey,\n    'fas fa-sort-down': isSortReverse && sortKey === activeSortKey\n  })\n  return <i className={sortName}></i>\n}\n  \nconst Loading = () => \n  <div><i className=\"fas fa-spinner spinner-rotation\"></i></div>\n\nconst withLoading = (Component) => ({ isLoading, ...rest}) =>\n  isLoading\n    ? <Loading />\n    : <Component { ...rest } />\n\nconst ButtonWithLoading = withLoading(Button);\n\nexport default App;\n\nexport {\n  Button,\n  Search,\n  Table,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}